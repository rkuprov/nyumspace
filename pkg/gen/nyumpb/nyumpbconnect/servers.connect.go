// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: servers.proto

package nyumpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	nyumpb "github.com/rkuprov/nyumspace/pkg/gen/nyumpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServerServiceName is the fully-qualified name of the ServerService service.
	ServerServiceName = "nyum.ServerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServerServiceRegisterUserProcedure is the fully-qualified name of the ServerService's
	// RegisterUser RPC.
	ServerServiceRegisterUserProcedure = "/nyum.ServerService/RegisterUser"
	// ServerServiceGetUserProcedure is the fully-qualified name of the ServerService's GetUser RPC.
	ServerServiceGetUserProcedure = "/nyum.ServerService/GetUser"
	// ServerServiceUpdateUserProcedure is the fully-qualified name of the ServerService's UpdateUser
	// RPC.
	ServerServiceUpdateUserProcedure = "/nyum.ServerService/UpdateUser"
	// ServerServiceDeleteUserProcedure is the fully-qualified name of the ServerService's DeleteUser
	// RPC.
	ServerServiceDeleteUserProcedure = "/nyum.ServerService/DeleteUser"
	// ServerServiceAddHomeProcedure is the fully-qualified name of the ServerService's AddHome RPC.
	ServerServiceAddHomeProcedure = "/nyum.ServerService/AddHome"
	// ServerServiceGetHomeProcedure is the fully-qualified name of the ServerService's GetHome RPC.
	ServerServiceGetHomeProcedure = "/nyum.ServerService/GetHome"
	// ServerServiceUpdateHomeProcedure is the fully-qualified name of the ServerService's UpdateHome
	// RPC.
	ServerServiceUpdateHomeProcedure = "/nyum.ServerService/UpdateHome"
	// ServerServiceDeleteHomeProcedure is the fully-qualified name of the ServerService's DeleteHome
	// RPC.
	ServerServiceDeleteHomeProcedure = "/nyum.ServerService/DeleteHome"
)

// ServerServiceClient is a client for the nyum.ServerService service.
type ServerServiceClient interface {
	RegisterUser(context.Context, *connect.Request[nyumpb.UserRegistrationRequest]) (*connect.Response[nyumpb.UserRegistrationResponse], error)
	GetUser(context.Context, *connect.Request[nyumpb.UserRequest]) (*connect.Response[nyumpb.UserResponse], error)
	UpdateUser(context.Context, *connect.Request[nyumpb.UserUpdateRequest]) (*connect.Response[nyumpb.UserUpdateResponse], error)
	DeleteUser(context.Context, *connect.Request[nyumpb.UserDeleteRequest]) (*connect.Response[nyumpb.UserDeleteResponse], error)
	AddHome(context.Context, *connect.Request[nyumpb.HomeCreationRequest]) (*connect.Response[nyumpb.HomeCreationResponse], error)
	GetHome(context.Context, *connect.Request[nyumpb.HomeRequest]) (*connect.Response[nyumpb.HomeResponse], error)
	UpdateHome(context.Context, *connect.Request[nyumpb.HomeUpdateRequest]) (*connect.Response[nyumpb.HomeUpdateResponse], error)
	DeleteHome(context.Context, *connect.Request[nyumpb.HomeDeleteRequest]) (*connect.Response[nyumpb.HomeDeleteResponse], error)
}

// NewServerServiceClient constructs a client for the nyum.ServerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serverServiceMethods := nyumpb.File_servers_proto.Services().ByName("ServerService").Methods()
	return &serverServiceClient{
		registerUser: connect.NewClient[nyumpb.UserRegistrationRequest, nyumpb.UserRegistrationResponse](
			httpClient,
			baseURL+ServerServiceRegisterUserProcedure,
			connect.WithSchema(serverServiceMethods.ByName("RegisterUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[nyumpb.UserRequest, nyumpb.UserResponse](
			httpClient,
			baseURL+ServerServiceGetUserProcedure,
			connect.WithSchema(serverServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[nyumpb.UserUpdateRequest, nyumpb.UserUpdateResponse](
			httpClient,
			baseURL+ServerServiceUpdateUserProcedure,
			connect.WithSchema(serverServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[nyumpb.UserDeleteRequest, nyumpb.UserDeleteResponse](
			httpClient,
			baseURL+ServerServiceDeleteUserProcedure,
			connect.WithSchema(serverServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		addHome: connect.NewClient[nyumpb.HomeCreationRequest, nyumpb.HomeCreationResponse](
			httpClient,
			baseURL+ServerServiceAddHomeProcedure,
			connect.WithSchema(serverServiceMethods.ByName("AddHome")),
			connect.WithClientOptions(opts...),
		),
		getHome: connect.NewClient[nyumpb.HomeRequest, nyumpb.HomeResponse](
			httpClient,
			baseURL+ServerServiceGetHomeProcedure,
			connect.WithSchema(serverServiceMethods.ByName("GetHome")),
			connect.WithClientOptions(opts...),
		),
		updateHome: connect.NewClient[nyumpb.HomeUpdateRequest, nyumpb.HomeUpdateResponse](
			httpClient,
			baseURL+ServerServiceUpdateHomeProcedure,
			connect.WithSchema(serverServiceMethods.ByName("UpdateHome")),
			connect.WithClientOptions(opts...),
		),
		deleteHome: connect.NewClient[nyumpb.HomeDeleteRequest, nyumpb.HomeDeleteResponse](
			httpClient,
			baseURL+ServerServiceDeleteHomeProcedure,
			connect.WithSchema(serverServiceMethods.ByName("DeleteHome")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serverServiceClient implements ServerServiceClient.
type serverServiceClient struct {
	registerUser *connect.Client[nyumpb.UserRegistrationRequest, nyumpb.UserRegistrationResponse]
	getUser      *connect.Client[nyumpb.UserRequest, nyumpb.UserResponse]
	updateUser   *connect.Client[nyumpb.UserUpdateRequest, nyumpb.UserUpdateResponse]
	deleteUser   *connect.Client[nyumpb.UserDeleteRequest, nyumpb.UserDeleteResponse]
	addHome      *connect.Client[nyumpb.HomeCreationRequest, nyumpb.HomeCreationResponse]
	getHome      *connect.Client[nyumpb.HomeRequest, nyumpb.HomeResponse]
	updateHome   *connect.Client[nyumpb.HomeUpdateRequest, nyumpb.HomeUpdateResponse]
	deleteHome   *connect.Client[nyumpb.HomeDeleteRequest, nyumpb.HomeDeleteResponse]
}

// RegisterUser calls nyum.ServerService.RegisterUser.
func (c *serverServiceClient) RegisterUser(ctx context.Context, req *connect.Request[nyumpb.UserRegistrationRequest]) (*connect.Response[nyumpb.UserRegistrationResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// GetUser calls nyum.ServerService.GetUser.
func (c *serverServiceClient) GetUser(ctx context.Context, req *connect.Request[nyumpb.UserRequest]) (*connect.Response[nyumpb.UserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls nyum.ServerService.UpdateUser.
func (c *serverServiceClient) UpdateUser(ctx context.Context, req *connect.Request[nyumpb.UserUpdateRequest]) (*connect.Response[nyumpb.UserUpdateResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls nyum.ServerService.DeleteUser.
func (c *serverServiceClient) DeleteUser(ctx context.Context, req *connect.Request[nyumpb.UserDeleteRequest]) (*connect.Response[nyumpb.UserDeleteResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// AddHome calls nyum.ServerService.AddHome.
func (c *serverServiceClient) AddHome(ctx context.Context, req *connect.Request[nyumpb.HomeCreationRequest]) (*connect.Response[nyumpb.HomeCreationResponse], error) {
	return c.addHome.CallUnary(ctx, req)
}

// GetHome calls nyum.ServerService.GetHome.
func (c *serverServiceClient) GetHome(ctx context.Context, req *connect.Request[nyumpb.HomeRequest]) (*connect.Response[nyumpb.HomeResponse], error) {
	return c.getHome.CallUnary(ctx, req)
}

// UpdateHome calls nyum.ServerService.UpdateHome.
func (c *serverServiceClient) UpdateHome(ctx context.Context, req *connect.Request[nyumpb.HomeUpdateRequest]) (*connect.Response[nyumpb.HomeUpdateResponse], error) {
	return c.updateHome.CallUnary(ctx, req)
}

// DeleteHome calls nyum.ServerService.DeleteHome.
func (c *serverServiceClient) DeleteHome(ctx context.Context, req *connect.Request[nyumpb.HomeDeleteRequest]) (*connect.Response[nyumpb.HomeDeleteResponse], error) {
	return c.deleteHome.CallUnary(ctx, req)
}

// ServerServiceHandler is an implementation of the nyum.ServerService service.
type ServerServiceHandler interface {
	RegisterUser(context.Context, *connect.Request[nyumpb.UserRegistrationRequest]) (*connect.Response[nyumpb.UserRegistrationResponse], error)
	GetUser(context.Context, *connect.Request[nyumpb.UserRequest]) (*connect.Response[nyumpb.UserResponse], error)
	UpdateUser(context.Context, *connect.Request[nyumpb.UserUpdateRequest]) (*connect.Response[nyumpb.UserUpdateResponse], error)
	DeleteUser(context.Context, *connect.Request[nyumpb.UserDeleteRequest]) (*connect.Response[nyumpb.UserDeleteResponse], error)
	AddHome(context.Context, *connect.Request[nyumpb.HomeCreationRequest]) (*connect.Response[nyumpb.HomeCreationResponse], error)
	GetHome(context.Context, *connect.Request[nyumpb.HomeRequest]) (*connect.Response[nyumpb.HomeResponse], error)
	UpdateHome(context.Context, *connect.Request[nyumpb.HomeUpdateRequest]) (*connect.Response[nyumpb.HomeUpdateResponse], error)
	DeleteHome(context.Context, *connect.Request[nyumpb.HomeDeleteRequest]) (*connect.Response[nyumpb.HomeDeleteResponse], error)
}

// NewServerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServerServiceHandler(svc ServerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serverServiceMethods := nyumpb.File_servers_proto.Services().ByName("ServerService").Methods()
	serverServiceRegisterUserHandler := connect.NewUnaryHandler(
		ServerServiceRegisterUserProcedure,
		svc.RegisterUser,
		connect.WithSchema(serverServiceMethods.ByName("RegisterUser")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceGetUserHandler := connect.NewUnaryHandler(
		ServerServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(serverServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceUpdateUserHandler := connect.NewUnaryHandler(
		ServerServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(serverServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceDeleteUserHandler := connect.NewUnaryHandler(
		ServerServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(serverServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceAddHomeHandler := connect.NewUnaryHandler(
		ServerServiceAddHomeProcedure,
		svc.AddHome,
		connect.WithSchema(serverServiceMethods.ByName("AddHome")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceGetHomeHandler := connect.NewUnaryHandler(
		ServerServiceGetHomeProcedure,
		svc.GetHome,
		connect.WithSchema(serverServiceMethods.ByName("GetHome")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceUpdateHomeHandler := connect.NewUnaryHandler(
		ServerServiceUpdateHomeProcedure,
		svc.UpdateHome,
		connect.WithSchema(serverServiceMethods.ByName("UpdateHome")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceDeleteHomeHandler := connect.NewUnaryHandler(
		ServerServiceDeleteHomeProcedure,
		svc.DeleteHome,
		connect.WithSchema(serverServiceMethods.ByName("DeleteHome")),
		connect.WithHandlerOptions(opts...),
	)
	return "/nyum.ServerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServerServiceRegisterUserProcedure:
			serverServiceRegisterUserHandler.ServeHTTP(w, r)
		case ServerServiceGetUserProcedure:
			serverServiceGetUserHandler.ServeHTTP(w, r)
		case ServerServiceUpdateUserProcedure:
			serverServiceUpdateUserHandler.ServeHTTP(w, r)
		case ServerServiceDeleteUserProcedure:
			serverServiceDeleteUserHandler.ServeHTTP(w, r)
		case ServerServiceAddHomeProcedure:
			serverServiceAddHomeHandler.ServeHTTP(w, r)
		case ServerServiceGetHomeProcedure:
			serverServiceGetHomeHandler.ServeHTTP(w, r)
		case ServerServiceUpdateHomeProcedure:
			serverServiceUpdateHomeHandler.ServeHTTP(w, r)
		case ServerServiceDeleteHomeProcedure:
			serverServiceDeleteHomeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServerServiceHandler struct{}

func (UnimplementedServerServiceHandler) RegisterUser(context.Context, *connect.Request[nyumpb.UserRegistrationRequest]) (*connect.Response[nyumpb.UserRegistrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nyum.ServerService.RegisterUser is not implemented"))
}

func (UnimplementedServerServiceHandler) GetUser(context.Context, *connect.Request[nyumpb.UserRequest]) (*connect.Response[nyumpb.UserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nyum.ServerService.GetUser is not implemented"))
}

func (UnimplementedServerServiceHandler) UpdateUser(context.Context, *connect.Request[nyumpb.UserUpdateRequest]) (*connect.Response[nyumpb.UserUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nyum.ServerService.UpdateUser is not implemented"))
}

func (UnimplementedServerServiceHandler) DeleteUser(context.Context, *connect.Request[nyumpb.UserDeleteRequest]) (*connect.Response[nyumpb.UserDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nyum.ServerService.DeleteUser is not implemented"))
}

func (UnimplementedServerServiceHandler) AddHome(context.Context, *connect.Request[nyumpb.HomeCreationRequest]) (*connect.Response[nyumpb.HomeCreationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nyum.ServerService.AddHome is not implemented"))
}

func (UnimplementedServerServiceHandler) GetHome(context.Context, *connect.Request[nyumpb.HomeRequest]) (*connect.Response[nyumpb.HomeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nyum.ServerService.GetHome is not implemented"))
}

func (UnimplementedServerServiceHandler) UpdateHome(context.Context, *connect.Request[nyumpb.HomeUpdateRequest]) (*connect.Response[nyumpb.HomeUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nyum.ServerService.UpdateHome is not implemented"))
}

func (UnimplementedServerServiceHandler) DeleteHome(context.Context, *connect.Request[nyumpb.HomeDeleteRequest]) (*connect.Response[nyumpb.HomeDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nyum.ServerService.DeleteHome is not implemented"))
}
